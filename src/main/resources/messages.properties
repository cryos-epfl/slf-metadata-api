
dae.cleanupFailureDataAccess       = Couldn't cleanup after a data access operation, but the actual operation went OK.
dae.dataIntegrityViolation         = Failed to save element.
dae.dataRetrievalFailure           = Exception thrown if certain expected data could not be retrieved, e.g. when looking up specific data via a known identifier. This exception will be thrown either by O/R mapping tools or by DAO implementations.
dae.dataSourceLookupFailure        = xception to be thrown by a DataSourceLookup implementation, indicating that the specified DataSource could not be obtained.
dae.invalidDataAccessApiUsage      = Exception thrown on incorrect usage of the API, such as failing to "compile" a query object that needed compilation before execution.\nThis represents a problem in our Java data access framework, not the underlying data access infrastructure.
dae.invalidDataAccessResourceUsage = Root for exceptions thrown when we use a data access resource incorrectly. Thrown for example on specifying bad SQL when using a RDBMS. Resource-specific subclasses are supplied by concrete data access packages.
dae.nonTransientDataAccessResource = Data access exception thrown when a resource fails completely and the failure is permanent.
dae.permissionDeniedDataAccess     = Exception thrown when the underlying resource denied a permission to access a specific element, such as a specific database table.
dae.uncategorizedDataAccess        = Normal superclass when we can't distinguish anything more specific than "something went wrong with the underlying resource": for example, a SQLException from JDBC we can't pinpoint more precisely.\n
dae.noStation       = Station Not Found!
